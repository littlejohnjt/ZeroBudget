@page "/BudgetCategories"

@using ZeroBudget.Data.Services
@using ZeroBudget.Data.EntityClasses
@using ZeroBudget.Validation
@using ZeroBudget.Components;
@using Microsoft.AspNetCore.Identity
@using ZeroBudget.Components;

@inject UserManager<IdentityUser> UserManager
@inherits OwningComponentBase<IBudgetingService>

<h3>Budget Categories</h3>

<AuthorizeView>
    <Authorized>
        <p>
            <!-- Add a new budget category -->
            <button class="btn btn-primary"
                    @onclick="AddNewBudgetCategory">
                Add New Budget Category
            </button>
        </p>
        <table class="table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Parent Budget Category</th>
                    <th>Is Tax Deductible</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @if (budgetCategories == null)
                {
                    <tr>
                        <td colspan="4">
                            <p><em>Loading...</em></p>
                        </td>
                    </tr>
                }
                else if (budgetCategories.Count() == 0)
                {
                    <tr>
                        <td colspan="4">
                            <span>No budget categories defined yet...</span>
                        </td>
                    </tr>
                }
                else
                {
                    @foreach (var budgetCategory in budgetCategories)
                    {
                        <tr>
                            <td>@budgetCategory.Name</td>
                            <td>@(budgetCategory.ParentBudgetCategory != null
                                    ? budgetCategory.ParentBudgetCategory.Name 
                                    : "None")
                            </td>
                            <td>@budgetCategory.IsTaxDeductible</td>
                            <td>
                                @if (budgetCategory.UserId == userId)
                                {
                                    <button class="btn btn-primary"
                                            @onclick="@(() => EditBudgetCategory(budgetCategory))">
                                        Edit
                                    </button>
                                    <button class="btn btn-primary"
                                            @onclick="@(async () => await DeleteBudgetCategory(budgetCategory))">
                                        Delete
                                    </button>
                                }
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>

        @if (showBudgetCategoryPopup)
        {
            <div class="modal" tabindex="-1" style="display: block;" role="dialog">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h3 class="modal-title">Add/Edit Budget Category</h3>
                            <button type="button" class="close"
                                    @onclick="CloseBudgetCategoryPopUp">
                                <span aria-hidden="true">X</span>
                            </button>
                        </div>
                        <!-- Add/Edit form for budget category -->
                        <EditForm Context="formContext"
                                  Model="budgetCategory"
                                  OnValidSubmit="@(async () => await SaveBudgetCategory())">
                            <!-- Validate the form input -->
                            <FluentValidator TValidator="BudgetCategoryValidator" />

                            <div class="modal-body">
                                <div class="form-group">
                                    <label class="font-weight-bold" 
                                           for="budgetCategoryName">
                                        Name:
                                    </label>
                                    <InputText id="budgetCategoryName" class="form-control"
                                               @bind-Value="budgetCategory.Name" />
                                    <ValidationMessage For="@(() => budgetCategory.Name)" />
                                </div>
                                <div class="form-group">
                                    <label class="font-weight-bold"
                                           for="parentBudgetCategory" >
                                        Parent Budget Category
                                    </label>
                                    <InputSelectNumber id="parentBudgetCategory" class="form-control"
                                                       @bind-Value="budgetCategory.ParentBudgetCategoryId">
                                        <option value="0">Select ...</option>
                                        @foreach (var parentBudgetCategory in budgetCategories)
                                        {
                                            <option value="@parentBudgetCategory.BudgetCategoryId">
                                                @parentBudgetCategory.Name
                                            </option>
                                        }
                                    </InputSelectNumber>
                                </div>
                                <div class="form-group">
                                    <label class="col-form-label font-weight-bold">Is tax deductible: </label>
                                    <InputCheckbox id="IsTaxDeductible"
                                                   class="form-check-inline"
                                                   @bind-Value="budgetCategory.IsTaxDeductible"
                                                   style="margin-left: 5px;">
                                    </InputCheckbox>
                                </div>
                                <br />
                                <button class="btn btn-primary" type="submit">
                                    Save
                                </button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        }
    </Authorized>
    <NotAuthorized>
        Sorry you are not authorized to access this page...
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authStateTask { get; set; }

    // The collection of budget periods
    public List<BudgetCategory> budgetCategories;

    // The logged in user's user Id
    private string userId;

    // The new/edit budget category
    public BudgetCategory budgetCategory = new BudgetCategory();

    protected override async Task OnInitializedAsync()
    {
        // Get the user Id
        var authState = await authStateTask;
        userId = authState.User.Identity.IsAuthenticated
            ? UserManager.GetUserId(authState.User)
            : string.Empty;

        // If the user is authenticated, retrieve info
        if (authState.User.Identity.IsAuthenticated
            && !string.IsNullOrEmpty(userId))
        {
            budgetCategories
                = await @Service.GetBudgetCategories(userId);
        }
    }

    // Indication of whether to show the pop-up
    public bool showBudgetCategoryPopup = false;

    /// <summary>
    /// AddNewBudgetCategory - Add a new budget category
    /// </summary>
    public void AddNewBudgetCategory()
    {
        // Create a new budget category
        budgetCategory
            = new BudgetCategory
            {
                BudgetCategoryId = 0,
                ParentBudgetCategoryId = null,
                IsTaxDeductible = false
            };

        // Show the pop-up dialog
        showBudgetCategoryPopup = true;
    }

    /// <summary>
    /// EditBudgetCategory - Edit the selected budget category
    /// </summary>
    /// <param name="budgetCategoryToUpdate">The budget category to update</param>
    public void EditBudgetCategory(BudgetCategory budgetCategoryToUpdate)
    {
        budgetCategory = budgetCategoryToUpdate;

        showBudgetCategoryPopup = true;
    }

    /// <summary>
    /// CloseBudgetCategoryPopUp - Close the dialog
    /// </summary>
    public void CloseBudgetCategoryPopUp()
    {
        showBudgetCategoryPopup = false;
    }

    /// <summary>
    /// SaveBudgetCategory - Save the new or edited budget category
    /// </summary>
    /// <returns>Status of the save operation</returns>
    public async Task<bool> SaveBudgetCategory()
    {
        bool result;

        showBudgetCategoryPopup = false;

        if (budgetCategory.BudgetCategoryId == 0)
        {
            // This is a new budget category
            result
                = await @Service.AddBudgetCategory(userId,
                budgetCategory.Name, budgetCategory.IsTaxDeductible,
                budgetCategory.ParentBudgetCategoryId);
        }
        else
        {
            // We're editing a budget category
            result
                = await @Service.UpdateBudgetCategory(userId,
                budgetCategory);
        }

        // Get the latest budget categories
        budgetCategories
            = await @Service.GetBudgetCategories(userId);

        return result;
    }

    /// <summary>
    /// Delete
    /// </summary>
    /// <param name="budgetCategory"></param>
    /// <returns>Status of the delete operation</returns>
    public async Task<bool> DeleteBudgetCategory(BudgetCategory budgetCategory)
    {
        // Note category may not be able to be deleted if it is in use.  Need to address
        // this

        // Delete the budget category
        var result 
            = await @Service.DeleteBudgetCategory(
                userId, budgetCategory.BudgetCategoryId);

        // Get the latest budget categories
        budgetCategories
            = await @Service.GetBudgetCategories(userId);

        return result;
    }
}
