@page "/BudgetPeriods"

@using ZeroBudget.Data.Services
@using ZeroBudget.Data.EntityClasses
@using ZeroBudget.Validation
@using ZeroBudget.Components;
@using Microsoft.AspNetCore.Identity

@inject UserManager<IdentityUser> UserManager
@inherits OwningComponentBase<IBudgetingService>

<h3>Budget Periods</h3>

<AuthorizeView>
    <!-- Show this section of the user is authenticated -->
    <Authorized>
        <p>
            <!-- Add a new budget period -->
            <button class="btn btn-primary"
                    @onclick="AddNewBudgetPeriod">
                Add New Budget Period
            </button>
        </p>
        <table class="table">
            <thead>
                <tr>
                    <th>Start Date</th>
                    <th>Type</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @if (budgetPeriods == null)
                {
                    <tr>
                        <td colspan="3">
                            <p><em>Loading...</em></p>
                        </td>
                    </tr>
                }
                else if (budgetPeriods.Count() == 0)
                {
                    <tr>
                        <td colspan="3">
                            <span>No budget periods defined yet...</span>
                        </td>
                    </tr>
                }
                else
                {
                    @foreach (var budgetPeriod in budgetPeriods)
                    {
                        <tr>
                            <td>@budgetPeriod.StartDate.ToShortDateString()</td>
                            <td>@budgetPeriod.BudgetPeriodType.Name</td>
                            <td>
                                <button class="btn btn-primary"
                                        @onclick="@(() => EditBudgetPeriod(budgetPeriod))">
                                    Edit
                                </button>
                                <button class="btn btn-primary"
                                        @onclick="@(async () => await DeleteBudgetPeriod(budgetPeriod))">
                                    Delete
                                </button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>

        @if (showBudgetPeriodPopup)
        {
            <!-- This is a popup to add/edit a budget period -->
            <div class="modal" tabindex="-1" style="display: block;" role="dialog">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h3 class="modal-title">Add/Edit Budget Period</h3>
                            <button type="button" class="close"
                                    @onclick="CloseBudgetPeriodPopUp">
                                <span aria-hidden="true">X</span>
                            </button> 
                        </div>
                        <!-- Add/Edit form for the current budget period -->
                        <EditForm Context="formContext"
                                  Model="budgetPeriod"
                                  OnValidSubmit="@(async () => await SaveBudgetPeriod())">
                            <!-- Validate the form input -->
                            <FluentValidator TValidator="BudgetPeriodValidator" />

                            <div class="modal-body">
                                <div class="form-group">
                                    <label class="font-weight-bold" for="budgetPeriodStartDate">
                                        Start Date:
                                    </label>
                                    <InputDate id="budgetPeriodStartDate" class="form-control"
                                               @bind-Value="budgetPeriod.StartDate" />
                                    <ValidationMessage For="@(() => budgetPeriod.StartDate)" />
                                </div>
                                <div class="form-group">
                                    <label class="font-weight-bold" for="budgetPeriodType">
                                        Budget Period Type:
                                    </label>
                                    <InputSelectNumber id="budgetPeriodType" class="form-control"
                                                       @bind-Value="budgetPeriod.BudgetPeriodTypeId">
                                        <option value="0">Select ...</option>
                                        @foreach (var budgetPeriodType in budgetPeriodTypes)
                                            {
                                            <option value="@budgetPeriodType.BudgetPeriodTypeId">@budgetPeriodType.Name</option>
                                            }
                                        /**/
                                        /**/
                                        /**/
                                    </InputSelectNumber>
                                    <ValidationMessage For="@(() => budgetPeriod.BudgetPeriodTypeId)" />
                                </div>
                                <br />
                                <button class="btn btn-primary" type="submit">
                                    Save
                                </button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        }

    </Authorized>
    <NotAuthorized>
        Sorry you are not authorized to access this page...
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authStateTask { get; set; }

    // The collection of budget periods
    public List<BudgetPeriod> budgetPeriods;

    public List<BudgetPeriodType> budgetPeriodTypes
        = new List<BudgetPeriodType>();

    // The logged in user's user Id
    private string userId;

    // The new/edit BudgetPeriod
    public BudgetPeriod budgetPeriod = new BudgetPeriod();

    /// <summary>
    /// OnInitializedAsync - Initialize the page
    /// </summary>
    /// <returns>Nothing</returns>
    protected override async Task OnInitializedAsync()
    {
        // Get the user Id
        var authState = await authStateTask;
        userId = authState.User.Identity.IsAuthenticated
            ? UserManager.GetUserId(authState.User)
            : string.Empty;

        // If the user is authenticated, retrieve info
        if (authState.User.Identity.IsAuthenticated
            && !string.IsNullOrEmpty(userId))
        {
            budgetPeriods
                = await @Service.GetBudgetPeriods(userId);

            budgetPeriodTypes
                = await @Service.GetBudgetPeriodTypes();
        }
    }

    // Indication of whether to show the pop-up
    public bool showBudgetPeriodPopup = false;

    /// <summary>
    /// AddNewBudgetPeriod
    /// </summary>
    public void AddNewBudgetPeriod()
    {
        // Create a new budget period
        budgetPeriod
            = new BudgetPeriod
            {
                BudgetPeriodId = 0,
                BudgetPeriodTypeId = 0,
                StartDate = DateTime.Today.Date
            };

        // Show the pop-up dialog
        showBudgetPeriodPopup = true;
    }

    /// <summary>
    /// EditBudgetPeriod - Edit the selected budget period
    /// </summary>
    /// <param name="budgetPeriodToUpdate">The budget period to update</param>
    public void EditBudgetPeriod(BudgetPeriod budgetPeriodToUpdate)
    {
        budgetPeriod = budgetPeriodToUpdate;

        showBudgetPeriodPopup = true;
    }

    // Close the modal pop-up

    /// <summary>
    /// CloseBudgetPeriodPopUp - close the dialog
    /// </summary>
    public void CloseBudgetPeriodPopUp()
    {
        showBudgetPeriodPopup = false;
    }

    /// <summary>
    /// SaveBudgetPeriod - save the new or edited budvet period
    /// </summary>
    /// <returns>Status of the save operation</returns>
    public async Task<bool> SaveBudgetPeriod()
    {
        bool result;

        showBudgetPeriodPopup = false;

        if (budgetPeriod.BudgetPeriodId == 0)
        {
            // This is a new budget period
            result
                = await @Service.AddBudgetPeriod(userId, budgetPeriod.StartDate,
                budgetPeriod.BudgetPeriodTypeId);
        }
        else
        {
            // We're editing a budget period
            result
                = await @Service.UpdateBudgetPeriod(
                userId, budgetPeriod);
        }

        // Get the latest budget periods
        budgetPeriods
            = await @Service.GetBudgetPeriods(userId);

        return result;
    }

    /// <summary>
    /// DeleteBudgetPeriod - Delete the specified budget period
    /// </summary>
    /// <param name="budgetPeriod"></param>
    /// <returns>The status of the delete operation</returns>
    public async Task<bool> DeleteBudgetPeriod(BudgetPeriod budgetPeriod)
    {
        // Delete the budget period
        var result
            = await @Service.DeleteBudgetPeriod(userId, budgetPeriod.BudgetPeriodId);

        // Get the latest budget periods
        budgetPeriods
            = await @Service.GetBudgetPeriods(userId);

        return result;
    }
}
